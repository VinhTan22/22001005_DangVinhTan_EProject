name: CI/CD Pipeline for 22001005_DangVinhTan_EProject

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build_and_test:
    name: ðŸ”§ Build & Test Services
    runs-on: ubuntu-latest

    services:
      mongo:
        # DÃ¹ng mirror á»•n Ä‘á»‹nh thay vÃ¬ Docker Hub (trÃ¡nh 503)
        image: ghcr.io/library/mongo:latest
        ports: [ "27017:27017" ]
      rabbitmq:
        image: ghcr.io/library/rabbitmq:3-management
        ports: [ "5672:5672", "15672:15672" ]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Pull MongoDB image (retry if Docker Hub unstable)
        run: |
          for i in 1 2 3; do
            docker pull ghcr.io/library/mongo:latest && break || sleep 10
          done

      - name: Install dependencies for all services
        run: |
          set -e
          for dir in auth product order api-gateway; do
            if [ -d "$dir" ]; then
              echo "Installing dependencies in $dir..."
              cd $dir
              npm install --legacy-peer-deps
              cd ..
            else
              echo " Directory $dir not found, skipping..."
            fi
          done

      - name: Verify build success
        run: echo "All services built successfully!"

  docker_build_push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Images
        run: |
          set -e
          echo "Building Docker images..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-service ./auth
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product-service ./product
          docker build -t ${{ secrets.DOCKER_USERNAME }}/order-service ./order
          docker build -t ${{ secrets.DOCKER_USERNAME }}/api-gateway ./api-gateway

          echo "Pushing Docker images..."
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-service
          docker push ${{ secrets.DOCKER_USERNAME }}/product-service
          docker push ${{ secrets.DOCKER_USERNAME }}/order-service
          docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: docker_build_push

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/deploy/project
            echo "Stopping old containers..."
            docker compose down

            echo "Pulling latest images..."
            docker compose pull

            echo "Starting services..."
            docker compose up -d

            echo "Cleaning up old images..."
            docker image prune -f
